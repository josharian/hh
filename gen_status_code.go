//go:build ignore

package main

import (
	"bytes"
	"errors"
	"fmt"
	"net/http"
	"os"
	"os/exec"
)

func main() {
	buf := new(bytes.Buffer)
	line := func(format string, args ...any) {
		fmt.Fprintf(buf, format+"\n", args...)
	}

	line("// Code generated by gen_status_code.go; DO NOT EDIT.")
	line("")
	line("package hh")
	line("")
	line("import (")
	line("\t\"encoding/json\"")
	line("\t\"fmt\"")
	line(")")

	for _, hundred := range []int{2, 4, 5} {
		for code := hundred * 100; code < (hundred+1)*100; code++ {
			if text := http.StatusText(code); text != "" {
				line("// E%d returns an HTTP %d (%v) with the default status text.", code, code, http.StatusText(code))
				line("func E%d() error {", code)
				line("\treturn &Error{StatusCode: %d, Text: %q}", code, http.StatusText(code))
				line("}")
				line("")
				line("// S%d returns an HTTP %d (%v) with text s.", code, code, http.StatusText(code))
				line("func S%d(s string) error {", code)
				line("\treturn &Error{StatusCode: %d, Text: s}", code)
				line("}")
				line("")
				line("// F%d returns an HTTP %d (%v) with Sprintf-formatted text.", code, code, http.StatusText(code))
				line("func F%d(format string, args ...any) error {", code)
				line("\treturn &Error{StatusCode: %d, Text: fmt.Sprintf(format, args...)}", code)
				line("}")
				line("")
				line("// J%d returns an HTTP %d (%v) accompanied by data encoded as JSON.", code, code, http.StatusText(code))
				line("// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.")
				line("func J%d(data any) error {", code)
				line("\tbuf, err := json.Marshal(data)")
				line("\tif err != nil {")
				line("\t\treturn &JSONError{Data: data, Err: err}")
				line("\t}")
				line("\treturn &Error{StatusCode: %d, Text: string(buf), ContentType: \"application/json\"}", code)
				line("}")
				line("")
			}
		}
	}

	code := buf.Bytes()
	cmd := exec.Command("gofmt")
	cmd.Stdin = bytes.NewReader(code)
	formatted, fmtErr := cmd.CombinedOutput()
	if fmtErr == nil {
		code = formatted
	} else {
		fmtErr = fmt.Errorf("gofmt: %v: %s", fmtErr, formatted)
	}

	writeErr := os.WriteFile("status_codes.go", code, 0o600)
	err := errors.Join(fmtErr, writeErr)
	if err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		os.Exit(1)
	}
}
