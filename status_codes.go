// Code generated by gen_status_code.go; DO NOT EDIT.

package hh

import (
	"encoding/json"
	"fmt"
)

// E200 returns an HTTP 200 (OK) with the default status text.
func E200() error {
	return &Error{StatusCode: 200, Text: "OK"}
}

// S200 returns an HTTP 200 (OK) with text s.
func S200(s string) error {
	return &Error{StatusCode: 200, Text: s}
}

// F200 returns an HTTP 200 (OK) with Sprintf-formatted text.
func F200(format string, args ...any) error {
	return &Error{StatusCode: 200, Text: fmt.Sprintf(format, args...)}
}

// J200 returns an HTTP 200 (OK) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J200(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 200, Text: string(buf), ContentType: "application/json"}
}

// E201 returns an HTTP 201 (Created) with the default status text.
func E201() error {
	return &Error{StatusCode: 201, Text: "Created"}
}

// S201 returns an HTTP 201 (Created) with text s.
func S201(s string) error {
	return &Error{StatusCode: 201, Text: s}
}

// F201 returns an HTTP 201 (Created) with Sprintf-formatted text.
func F201(format string, args ...any) error {
	return &Error{StatusCode: 201, Text: fmt.Sprintf(format, args...)}
}

// J201 returns an HTTP 201 (Created) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J201(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 201, Text: string(buf), ContentType: "application/json"}
}

// E202 returns an HTTP 202 (Accepted) with the default status text.
func E202() error {
	return &Error{StatusCode: 202, Text: "Accepted"}
}

// S202 returns an HTTP 202 (Accepted) with text s.
func S202(s string) error {
	return &Error{StatusCode: 202, Text: s}
}

// F202 returns an HTTP 202 (Accepted) with Sprintf-formatted text.
func F202(format string, args ...any) error {
	return &Error{StatusCode: 202, Text: fmt.Sprintf(format, args...)}
}

// J202 returns an HTTP 202 (Accepted) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J202(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 202, Text: string(buf), ContentType: "application/json"}
}

// E203 returns an HTTP 203 (Non-Authoritative Information) with the default status text.
func E203() error {
	return &Error{StatusCode: 203, Text: "Non-Authoritative Information"}
}

// S203 returns an HTTP 203 (Non-Authoritative Information) with text s.
func S203(s string) error {
	return &Error{StatusCode: 203, Text: s}
}

// F203 returns an HTTP 203 (Non-Authoritative Information) with Sprintf-formatted text.
func F203(format string, args ...any) error {
	return &Error{StatusCode: 203, Text: fmt.Sprintf(format, args...)}
}

// J203 returns an HTTP 203 (Non-Authoritative Information) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J203(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 203, Text: string(buf), ContentType: "application/json"}
}

// E204 returns an HTTP 204 (No Content) with the default status text.
func E204() error {
	return &Error{StatusCode: 204, Text: "No Content"}
}

// S204 returns an HTTP 204 (No Content) with text s.
func S204(s string) error {
	return &Error{StatusCode: 204, Text: s}
}

// F204 returns an HTTP 204 (No Content) with Sprintf-formatted text.
func F204(format string, args ...any) error {
	return &Error{StatusCode: 204, Text: fmt.Sprintf(format, args...)}
}

// J204 returns an HTTP 204 (No Content) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J204(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 204, Text: string(buf), ContentType: "application/json"}
}

// E205 returns an HTTP 205 (Reset Content) with the default status text.
func E205() error {
	return &Error{StatusCode: 205, Text: "Reset Content"}
}

// S205 returns an HTTP 205 (Reset Content) with text s.
func S205(s string) error {
	return &Error{StatusCode: 205, Text: s}
}

// F205 returns an HTTP 205 (Reset Content) with Sprintf-formatted text.
func F205(format string, args ...any) error {
	return &Error{StatusCode: 205, Text: fmt.Sprintf(format, args...)}
}

// J205 returns an HTTP 205 (Reset Content) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J205(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 205, Text: string(buf), ContentType: "application/json"}
}

// E206 returns an HTTP 206 (Partial Content) with the default status text.
func E206() error {
	return &Error{StatusCode: 206, Text: "Partial Content"}
}

// S206 returns an HTTP 206 (Partial Content) with text s.
func S206(s string) error {
	return &Error{StatusCode: 206, Text: s}
}

// F206 returns an HTTP 206 (Partial Content) with Sprintf-formatted text.
func F206(format string, args ...any) error {
	return &Error{StatusCode: 206, Text: fmt.Sprintf(format, args...)}
}

// J206 returns an HTTP 206 (Partial Content) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J206(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 206, Text: string(buf), ContentType: "application/json"}
}

// E207 returns an HTTP 207 (Multi-Status) with the default status text.
func E207() error {
	return &Error{StatusCode: 207, Text: "Multi-Status"}
}

// S207 returns an HTTP 207 (Multi-Status) with text s.
func S207(s string) error {
	return &Error{StatusCode: 207, Text: s}
}

// F207 returns an HTTP 207 (Multi-Status) with Sprintf-formatted text.
func F207(format string, args ...any) error {
	return &Error{StatusCode: 207, Text: fmt.Sprintf(format, args...)}
}

// J207 returns an HTTP 207 (Multi-Status) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J207(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 207, Text: string(buf), ContentType: "application/json"}
}

// E208 returns an HTTP 208 (Already Reported) with the default status text.
func E208() error {
	return &Error{StatusCode: 208, Text: "Already Reported"}
}

// S208 returns an HTTP 208 (Already Reported) with text s.
func S208(s string) error {
	return &Error{StatusCode: 208, Text: s}
}

// F208 returns an HTTP 208 (Already Reported) with Sprintf-formatted text.
func F208(format string, args ...any) error {
	return &Error{StatusCode: 208, Text: fmt.Sprintf(format, args...)}
}

// J208 returns an HTTP 208 (Already Reported) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J208(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 208, Text: string(buf), ContentType: "application/json"}
}

// E226 returns an HTTP 226 (IM Used) with the default status text.
func E226() error {
	return &Error{StatusCode: 226, Text: "IM Used"}
}

// S226 returns an HTTP 226 (IM Used) with text s.
func S226(s string) error {
	return &Error{StatusCode: 226, Text: s}
}

// F226 returns an HTTP 226 (IM Used) with Sprintf-formatted text.
func F226(format string, args ...any) error {
	return &Error{StatusCode: 226, Text: fmt.Sprintf(format, args...)}
}

// J226 returns an HTTP 226 (IM Used) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J226(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 226, Text: string(buf), ContentType: "application/json"}
}

// E400 returns an HTTP 400 (Bad Request) with the default status text.
func E400() error {
	return &Error{StatusCode: 400, Text: "Bad Request"}
}

// S400 returns an HTTP 400 (Bad Request) with text s.
func S400(s string) error {
	return &Error{StatusCode: 400, Text: s}
}

// F400 returns an HTTP 400 (Bad Request) with Sprintf-formatted text.
func F400(format string, args ...any) error {
	return &Error{StatusCode: 400, Text: fmt.Sprintf(format, args...)}
}

// J400 returns an HTTP 400 (Bad Request) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J400(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 400, Text: string(buf), ContentType: "application/json"}
}

// E401 returns an HTTP 401 (Unauthorized) with the default status text.
func E401() error {
	return &Error{StatusCode: 401, Text: "Unauthorized"}
}

// S401 returns an HTTP 401 (Unauthorized) with text s.
func S401(s string) error {
	return &Error{StatusCode: 401, Text: s}
}

// F401 returns an HTTP 401 (Unauthorized) with Sprintf-formatted text.
func F401(format string, args ...any) error {
	return &Error{StatusCode: 401, Text: fmt.Sprintf(format, args...)}
}

// J401 returns an HTTP 401 (Unauthorized) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J401(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 401, Text: string(buf), ContentType: "application/json"}
}

// E402 returns an HTTP 402 (Payment Required) with the default status text.
func E402() error {
	return &Error{StatusCode: 402, Text: "Payment Required"}
}

// S402 returns an HTTP 402 (Payment Required) with text s.
func S402(s string) error {
	return &Error{StatusCode: 402, Text: s}
}

// F402 returns an HTTP 402 (Payment Required) with Sprintf-formatted text.
func F402(format string, args ...any) error {
	return &Error{StatusCode: 402, Text: fmt.Sprintf(format, args...)}
}

// J402 returns an HTTP 402 (Payment Required) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J402(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 402, Text: string(buf), ContentType: "application/json"}
}

// E403 returns an HTTP 403 (Forbidden) with the default status text.
func E403() error {
	return &Error{StatusCode: 403, Text: "Forbidden"}
}

// S403 returns an HTTP 403 (Forbidden) with text s.
func S403(s string) error {
	return &Error{StatusCode: 403, Text: s}
}

// F403 returns an HTTP 403 (Forbidden) with Sprintf-formatted text.
func F403(format string, args ...any) error {
	return &Error{StatusCode: 403, Text: fmt.Sprintf(format, args...)}
}

// J403 returns an HTTP 403 (Forbidden) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J403(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 403, Text: string(buf), ContentType: "application/json"}
}

// E404 returns an HTTP 404 (Not Found) with the default status text.
func E404() error {
	return &Error{StatusCode: 404, Text: "Not Found"}
}

// S404 returns an HTTP 404 (Not Found) with text s.
func S404(s string) error {
	return &Error{StatusCode: 404, Text: s}
}

// F404 returns an HTTP 404 (Not Found) with Sprintf-formatted text.
func F404(format string, args ...any) error {
	return &Error{StatusCode: 404, Text: fmt.Sprintf(format, args...)}
}

// J404 returns an HTTP 404 (Not Found) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J404(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 404, Text: string(buf), ContentType: "application/json"}
}

// E405 returns an HTTP 405 (Method Not Allowed) with the default status text.
func E405() error {
	return &Error{StatusCode: 405, Text: "Method Not Allowed"}
}

// S405 returns an HTTP 405 (Method Not Allowed) with text s.
func S405(s string) error {
	return &Error{StatusCode: 405, Text: s}
}

// F405 returns an HTTP 405 (Method Not Allowed) with Sprintf-formatted text.
func F405(format string, args ...any) error {
	return &Error{StatusCode: 405, Text: fmt.Sprintf(format, args...)}
}

// J405 returns an HTTP 405 (Method Not Allowed) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J405(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 405, Text: string(buf), ContentType: "application/json"}
}

// E406 returns an HTTP 406 (Not Acceptable) with the default status text.
func E406() error {
	return &Error{StatusCode: 406, Text: "Not Acceptable"}
}

// S406 returns an HTTP 406 (Not Acceptable) with text s.
func S406(s string) error {
	return &Error{StatusCode: 406, Text: s}
}

// F406 returns an HTTP 406 (Not Acceptable) with Sprintf-formatted text.
func F406(format string, args ...any) error {
	return &Error{StatusCode: 406, Text: fmt.Sprintf(format, args...)}
}

// J406 returns an HTTP 406 (Not Acceptable) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J406(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 406, Text: string(buf), ContentType: "application/json"}
}

// E407 returns an HTTP 407 (Proxy Authentication Required) with the default status text.
func E407() error {
	return &Error{StatusCode: 407, Text: "Proxy Authentication Required"}
}

// S407 returns an HTTP 407 (Proxy Authentication Required) with text s.
func S407(s string) error {
	return &Error{StatusCode: 407, Text: s}
}

// F407 returns an HTTP 407 (Proxy Authentication Required) with Sprintf-formatted text.
func F407(format string, args ...any) error {
	return &Error{StatusCode: 407, Text: fmt.Sprintf(format, args...)}
}

// J407 returns an HTTP 407 (Proxy Authentication Required) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J407(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 407, Text: string(buf), ContentType: "application/json"}
}

// E408 returns an HTTP 408 (Request Timeout) with the default status text.
func E408() error {
	return &Error{StatusCode: 408, Text: "Request Timeout"}
}

// S408 returns an HTTP 408 (Request Timeout) with text s.
func S408(s string) error {
	return &Error{StatusCode: 408, Text: s}
}

// F408 returns an HTTP 408 (Request Timeout) with Sprintf-formatted text.
func F408(format string, args ...any) error {
	return &Error{StatusCode: 408, Text: fmt.Sprintf(format, args...)}
}

// J408 returns an HTTP 408 (Request Timeout) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J408(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 408, Text: string(buf), ContentType: "application/json"}
}

// E409 returns an HTTP 409 (Conflict) with the default status text.
func E409() error {
	return &Error{StatusCode: 409, Text: "Conflict"}
}

// S409 returns an HTTP 409 (Conflict) with text s.
func S409(s string) error {
	return &Error{StatusCode: 409, Text: s}
}

// F409 returns an HTTP 409 (Conflict) with Sprintf-formatted text.
func F409(format string, args ...any) error {
	return &Error{StatusCode: 409, Text: fmt.Sprintf(format, args...)}
}

// J409 returns an HTTP 409 (Conflict) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J409(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 409, Text: string(buf), ContentType: "application/json"}
}

// E410 returns an HTTP 410 (Gone) with the default status text.
func E410() error {
	return &Error{StatusCode: 410, Text: "Gone"}
}

// S410 returns an HTTP 410 (Gone) with text s.
func S410(s string) error {
	return &Error{StatusCode: 410, Text: s}
}

// F410 returns an HTTP 410 (Gone) with Sprintf-formatted text.
func F410(format string, args ...any) error {
	return &Error{StatusCode: 410, Text: fmt.Sprintf(format, args...)}
}

// J410 returns an HTTP 410 (Gone) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J410(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 410, Text: string(buf), ContentType: "application/json"}
}

// E411 returns an HTTP 411 (Length Required) with the default status text.
func E411() error {
	return &Error{StatusCode: 411, Text: "Length Required"}
}

// S411 returns an HTTP 411 (Length Required) with text s.
func S411(s string) error {
	return &Error{StatusCode: 411, Text: s}
}

// F411 returns an HTTP 411 (Length Required) with Sprintf-formatted text.
func F411(format string, args ...any) error {
	return &Error{StatusCode: 411, Text: fmt.Sprintf(format, args...)}
}

// J411 returns an HTTP 411 (Length Required) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J411(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 411, Text: string(buf), ContentType: "application/json"}
}

// E412 returns an HTTP 412 (Precondition Failed) with the default status text.
func E412() error {
	return &Error{StatusCode: 412, Text: "Precondition Failed"}
}

// S412 returns an HTTP 412 (Precondition Failed) with text s.
func S412(s string) error {
	return &Error{StatusCode: 412, Text: s}
}

// F412 returns an HTTP 412 (Precondition Failed) with Sprintf-formatted text.
func F412(format string, args ...any) error {
	return &Error{StatusCode: 412, Text: fmt.Sprintf(format, args...)}
}

// J412 returns an HTTP 412 (Precondition Failed) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J412(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 412, Text: string(buf), ContentType: "application/json"}
}

// E413 returns an HTTP 413 (Request Entity Too Large) with the default status text.
func E413() error {
	return &Error{StatusCode: 413, Text: "Request Entity Too Large"}
}

// S413 returns an HTTP 413 (Request Entity Too Large) with text s.
func S413(s string) error {
	return &Error{StatusCode: 413, Text: s}
}

// F413 returns an HTTP 413 (Request Entity Too Large) with Sprintf-formatted text.
func F413(format string, args ...any) error {
	return &Error{StatusCode: 413, Text: fmt.Sprintf(format, args...)}
}

// J413 returns an HTTP 413 (Request Entity Too Large) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J413(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 413, Text: string(buf), ContentType: "application/json"}
}

// E414 returns an HTTP 414 (Request URI Too Long) with the default status text.
func E414() error {
	return &Error{StatusCode: 414, Text: "Request URI Too Long"}
}

// S414 returns an HTTP 414 (Request URI Too Long) with text s.
func S414(s string) error {
	return &Error{StatusCode: 414, Text: s}
}

// F414 returns an HTTP 414 (Request URI Too Long) with Sprintf-formatted text.
func F414(format string, args ...any) error {
	return &Error{StatusCode: 414, Text: fmt.Sprintf(format, args...)}
}

// J414 returns an HTTP 414 (Request URI Too Long) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J414(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 414, Text: string(buf), ContentType: "application/json"}
}

// E415 returns an HTTP 415 (Unsupported Media Type) with the default status text.
func E415() error {
	return &Error{StatusCode: 415, Text: "Unsupported Media Type"}
}

// S415 returns an HTTP 415 (Unsupported Media Type) with text s.
func S415(s string) error {
	return &Error{StatusCode: 415, Text: s}
}

// F415 returns an HTTP 415 (Unsupported Media Type) with Sprintf-formatted text.
func F415(format string, args ...any) error {
	return &Error{StatusCode: 415, Text: fmt.Sprintf(format, args...)}
}

// J415 returns an HTTP 415 (Unsupported Media Type) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J415(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 415, Text: string(buf), ContentType: "application/json"}
}

// E416 returns an HTTP 416 (Requested Range Not Satisfiable) with the default status text.
func E416() error {
	return &Error{StatusCode: 416, Text: "Requested Range Not Satisfiable"}
}

// S416 returns an HTTP 416 (Requested Range Not Satisfiable) with text s.
func S416(s string) error {
	return &Error{StatusCode: 416, Text: s}
}

// F416 returns an HTTP 416 (Requested Range Not Satisfiable) with Sprintf-formatted text.
func F416(format string, args ...any) error {
	return &Error{StatusCode: 416, Text: fmt.Sprintf(format, args...)}
}

// J416 returns an HTTP 416 (Requested Range Not Satisfiable) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J416(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 416, Text: string(buf), ContentType: "application/json"}
}

// E417 returns an HTTP 417 (Expectation Failed) with the default status text.
func E417() error {
	return &Error{StatusCode: 417, Text: "Expectation Failed"}
}

// S417 returns an HTTP 417 (Expectation Failed) with text s.
func S417(s string) error {
	return &Error{StatusCode: 417, Text: s}
}

// F417 returns an HTTP 417 (Expectation Failed) with Sprintf-formatted text.
func F417(format string, args ...any) error {
	return &Error{StatusCode: 417, Text: fmt.Sprintf(format, args...)}
}

// J417 returns an HTTP 417 (Expectation Failed) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J417(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 417, Text: string(buf), ContentType: "application/json"}
}

// E418 returns an HTTP 418 (I'm a teapot) with the default status text.
func E418() error {
	return &Error{StatusCode: 418, Text: "I'm a teapot"}
}

// S418 returns an HTTP 418 (I'm a teapot) with text s.
func S418(s string) error {
	return &Error{StatusCode: 418, Text: s}
}

// F418 returns an HTTP 418 (I'm a teapot) with Sprintf-formatted text.
func F418(format string, args ...any) error {
	return &Error{StatusCode: 418, Text: fmt.Sprintf(format, args...)}
}

// J418 returns an HTTP 418 (I'm a teapot) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J418(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 418, Text: string(buf), ContentType: "application/json"}
}

// E421 returns an HTTP 421 (Misdirected Request) with the default status text.
func E421() error {
	return &Error{StatusCode: 421, Text: "Misdirected Request"}
}

// S421 returns an HTTP 421 (Misdirected Request) with text s.
func S421(s string) error {
	return &Error{StatusCode: 421, Text: s}
}

// F421 returns an HTTP 421 (Misdirected Request) with Sprintf-formatted text.
func F421(format string, args ...any) error {
	return &Error{StatusCode: 421, Text: fmt.Sprintf(format, args...)}
}

// J421 returns an HTTP 421 (Misdirected Request) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J421(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 421, Text: string(buf), ContentType: "application/json"}
}

// E422 returns an HTTP 422 (Unprocessable Entity) with the default status text.
func E422() error {
	return &Error{StatusCode: 422, Text: "Unprocessable Entity"}
}

// S422 returns an HTTP 422 (Unprocessable Entity) with text s.
func S422(s string) error {
	return &Error{StatusCode: 422, Text: s}
}

// F422 returns an HTTP 422 (Unprocessable Entity) with Sprintf-formatted text.
func F422(format string, args ...any) error {
	return &Error{StatusCode: 422, Text: fmt.Sprintf(format, args...)}
}

// J422 returns an HTTP 422 (Unprocessable Entity) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J422(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 422, Text: string(buf), ContentType: "application/json"}
}

// E423 returns an HTTP 423 (Locked) with the default status text.
func E423() error {
	return &Error{StatusCode: 423, Text: "Locked"}
}

// S423 returns an HTTP 423 (Locked) with text s.
func S423(s string) error {
	return &Error{StatusCode: 423, Text: s}
}

// F423 returns an HTTP 423 (Locked) with Sprintf-formatted text.
func F423(format string, args ...any) error {
	return &Error{StatusCode: 423, Text: fmt.Sprintf(format, args...)}
}

// J423 returns an HTTP 423 (Locked) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J423(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 423, Text: string(buf), ContentType: "application/json"}
}

// E424 returns an HTTP 424 (Failed Dependency) with the default status text.
func E424() error {
	return &Error{StatusCode: 424, Text: "Failed Dependency"}
}

// S424 returns an HTTP 424 (Failed Dependency) with text s.
func S424(s string) error {
	return &Error{StatusCode: 424, Text: s}
}

// F424 returns an HTTP 424 (Failed Dependency) with Sprintf-formatted text.
func F424(format string, args ...any) error {
	return &Error{StatusCode: 424, Text: fmt.Sprintf(format, args...)}
}

// J424 returns an HTTP 424 (Failed Dependency) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J424(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 424, Text: string(buf), ContentType: "application/json"}
}

// E425 returns an HTTP 425 (Too Early) with the default status text.
func E425() error {
	return &Error{StatusCode: 425, Text: "Too Early"}
}

// S425 returns an HTTP 425 (Too Early) with text s.
func S425(s string) error {
	return &Error{StatusCode: 425, Text: s}
}

// F425 returns an HTTP 425 (Too Early) with Sprintf-formatted text.
func F425(format string, args ...any) error {
	return &Error{StatusCode: 425, Text: fmt.Sprintf(format, args...)}
}

// J425 returns an HTTP 425 (Too Early) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J425(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 425, Text: string(buf), ContentType: "application/json"}
}

// E426 returns an HTTP 426 (Upgrade Required) with the default status text.
func E426() error {
	return &Error{StatusCode: 426, Text: "Upgrade Required"}
}

// S426 returns an HTTP 426 (Upgrade Required) with text s.
func S426(s string) error {
	return &Error{StatusCode: 426, Text: s}
}

// F426 returns an HTTP 426 (Upgrade Required) with Sprintf-formatted text.
func F426(format string, args ...any) error {
	return &Error{StatusCode: 426, Text: fmt.Sprintf(format, args...)}
}

// J426 returns an HTTP 426 (Upgrade Required) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J426(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 426, Text: string(buf), ContentType: "application/json"}
}

// E428 returns an HTTP 428 (Precondition Required) with the default status text.
func E428() error {
	return &Error{StatusCode: 428, Text: "Precondition Required"}
}

// S428 returns an HTTP 428 (Precondition Required) with text s.
func S428(s string) error {
	return &Error{StatusCode: 428, Text: s}
}

// F428 returns an HTTP 428 (Precondition Required) with Sprintf-formatted text.
func F428(format string, args ...any) error {
	return &Error{StatusCode: 428, Text: fmt.Sprintf(format, args...)}
}

// J428 returns an HTTP 428 (Precondition Required) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J428(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 428, Text: string(buf), ContentType: "application/json"}
}

// E429 returns an HTTP 429 (Too Many Requests) with the default status text.
func E429() error {
	return &Error{StatusCode: 429, Text: "Too Many Requests"}
}

// S429 returns an HTTP 429 (Too Many Requests) with text s.
func S429(s string) error {
	return &Error{StatusCode: 429, Text: s}
}

// F429 returns an HTTP 429 (Too Many Requests) with Sprintf-formatted text.
func F429(format string, args ...any) error {
	return &Error{StatusCode: 429, Text: fmt.Sprintf(format, args...)}
}

// J429 returns an HTTP 429 (Too Many Requests) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J429(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 429, Text: string(buf), ContentType: "application/json"}
}

// E431 returns an HTTP 431 (Request Header Fields Too Large) with the default status text.
func E431() error {
	return &Error{StatusCode: 431, Text: "Request Header Fields Too Large"}
}

// S431 returns an HTTP 431 (Request Header Fields Too Large) with text s.
func S431(s string) error {
	return &Error{StatusCode: 431, Text: s}
}

// F431 returns an HTTP 431 (Request Header Fields Too Large) with Sprintf-formatted text.
func F431(format string, args ...any) error {
	return &Error{StatusCode: 431, Text: fmt.Sprintf(format, args...)}
}

// J431 returns an HTTP 431 (Request Header Fields Too Large) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J431(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 431, Text: string(buf), ContentType: "application/json"}
}

// E451 returns an HTTP 451 (Unavailable For Legal Reasons) with the default status text.
func E451() error {
	return &Error{StatusCode: 451, Text: "Unavailable For Legal Reasons"}
}

// S451 returns an HTTP 451 (Unavailable For Legal Reasons) with text s.
func S451(s string) error {
	return &Error{StatusCode: 451, Text: s}
}

// F451 returns an HTTP 451 (Unavailable For Legal Reasons) with Sprintf-formatted text.
func F451(format string, args ...any) error {
	return &Error{StatusCode: 451, Text: fmt.Sprintf(format, args...)}
}

// J451 returns an HTTP 451 (Unavailable For Legal Reasons) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J451(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 451, Text: string(buf), ContentType: "application/json"}
}

// E500 returns an HTTP 500 (Internal Server Error) with the default status text.
func E500() error {
	return &Error{StatusCode: 500, Text: "Internal Server Error"}
}

// S500 returns an HTTP 500 (Internal Server Error) with text s.
func S500(s string) error {
	return &Error{StatusCode: 500, Text: s}
}

// F500 returns an HTTP 500 (Internal Server Error) with Sprintf-formatted text.
func F500(format string, args ...any) error {
	return &Error{StatusCode: 500, Text: fmt.Sprintf(format, args...)}
}

// J500 returns an HTTP 500 (Internal Server Error) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J500(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 500, Text: string(buf), ContentType: "application/json"}
}

// E501 returns an HTTP 501 (Not Implemented) with the default status text.
func E501() error {
	return &Error{StatusCode: 501, Text: "Not Implemented"}
}

// S501 returns an HTTP 501 (Not Implemented) with text s.
func S501(s string) error {
	return &Error{StatusCode: 501, Text: s}
}

// F501 returns an HTTP 501 (Not Implemented) with Sprintf-formatted text.
func F501(format string, args ...any) error {
	return &Error{StatusCode: 501, Text: fmt.Sprintf(format, args...)}
}

// J501 returns an HTTP 501 (Not Implemented) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J501(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 501, Text: string(buf), ContentType: "application/json"}
}

// E502 returns an HTTP 502 (Bad Gateway) with the default status text.
func E502() error {
	return &Error{StatusCode: 502, Text: "Bad Gateway"}
}

// S502 returns an HTTP 502 (Bad Gateway) with text s.
func S502(s string) error {
	return &Error{StatusCode: 502, Text: s}
}

// F502 returns an HTTP 502 (Bad Gateway) with Sprintf-formatted text.
func F502(format string, args ...any) error {
	return &Error{StatusCode: 502, Text: fmt.Sprintf(format, args...)}
}

// J502 returns an HTTP 502 (Bad Gateway) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J502(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 502, Text: string(buf), ContentType: "application/json"}
}

// E503 returns an HTTP 503 (Service Unavailable) with the default status text.
func E503() error {
	return &Error{StatusCode: 503, Text: "Service Unavailable"}
}

// S503 returns an HTTP 503 (Service Unavailable) with text s.
func S503(s string) error {
	return &Error{StatusCode: 503, Text: s}
}

// F503 returns an HTTP 503 (Service Unavailable) with Sprintf-formatted text.
func F503(format string, args ...any) error {
	return &Error{StatusCode: 503, Text: fmt.Sprintf(format, args...)}
}

// J503 returns an HTTP 503 (Service Unavailable) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J503(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 503, Text: string(buf), ContentType: "application/json"}
}

// E504 returns an HTTP 504 (Gateway Timeout) with the default status text.
func E504() error {
	return &Error{StatusCode: 504, Text: "Gateway Timeout"}
}

// S504 returns an HTTP 504 (Gateway Timeout) with text s.
func S504(s string) error {
	return &Error{StatusCode: 504, Text: s}
}

// F504 returns an HTTP 504 (Gateway Timeout) with Sprintf-formatted text.
func F504(format string, args ...any) error {
	return &Error{StatusCode: 504, Text: fmt.Sprintf(format, args...)}
}

// J504 returns an HTTP 504 (Gateway Timeout) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J504(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 504, Text: string(buf), ContentType: "application/json"}
}

// E505 returns an HTTP 505 (HTTP Version Not Supported) with the default status text.
func E505() error {
	return &Error{StatusCode: 505, Text: "HTTP Version Not Supported"}
}

// S505 returns an HTTP 505 (HTTP Version Not Supported) with text s.
func S505(s string) error {
	return &Error{StatusCode: 505, Text: s}
}

// F505 returns an HTTP 505 (HTTP Version Not Supported) with Sprintf-formatted text.
func F505(format string, args ...any) error {
	return &Error{StatusCode: 505, Text: fmt.Sprintf(format, args...)}
}

// J505 returns an HTTP 505 (HTTP Version Not Supported) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J505(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 505, Text: string(buf), ContentType: "application/json"}
}

// E506 returns an HTTP 506 (Variant Also Negotiates) with the default status text.
func E506() error {
	return &Error{StatusCode: 506, Text: "Variant Also Negotiates"}
}

// S506 returns an HTTP 506 (Variant Also Negotiates) with text s.
func S506(s string) error {
	return &Error{StatusCode: 506, Text: s}
}

// F506 returns an HTTP 506 (Variant Also Negotiates) with Sprintf-formatted text.
func F506(format string, args ...any) error {
	return &Error{StatusCode: 506, Text: fmt.Sprintf(format, args...)}
}

// J506 returns an HTTP 506 (Variant Also Negotiates) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J506(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 506, Text: string(buf), ContentType: "application/json"}
}

// E507 returns an HTTP 507 (Insufficient Storage) with the default status text.
func E507() error {
	return &Error{StatusCode: 507, Text: "Insufficient Storage"}
}

// S507 returns an HTTP 507 (Insufficient Storage) with text s.
func S507(s string) error {
	return &Error{StatusCode: 507, Text: s}
}

// F507 returns an HTTP 507 (Insufficient Storage) with Sprintf-formatted text.
func F507(format string, args ...any) error {
	return &Error{StatusCode: 507, Text: fmt.Sprintf(format, args...)}
}

// J507 returns an HTTP 507 (Insufficient Storage) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J507(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 507, Text: string(buf), ContentType: "application/json"}
}

// E508 returns an HTTP 508 (Loop Detected) with the default status text.
func E508() error {
	return &Error{StatusCode: 508, Text: "Loop Detected"}
}

// S508 returns an HTTP 508 (Loop Detected) with text s.
func S508(s string) error {
	return &Error{StatusCode: 508, Text: s}
}

// F508 returns an HTTP 508 (Loop Detected) with Sprintf-formatted text.
func F508(format string, args ...any) error {
	return &Error{StatusCode: 508, Text: fmt.Sprintf(format, args...)}
}

// J508 returns an HTTP 508 (Loop Detected) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J508(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 508, Text: string(buf), ContentType: "application/json"}
}

// E510 returns an HTTP 510 (Not Extended) with the default status text.
func E510() error {
	return &Error{StatusCode: 510, Text: "Not Extended"}
}

// S510 returns an HTTP 510 (Not Extended) with text s.
func S510(s string) error {
	return &Error{StatusCode: 510, Text: s}
}

// F510 returns an HTTP 510 (Not Extended) with Sprintf-formatted text.
func F510(format string, args ...any) error {
	return &Error{StatusCode: 510, Text: fmt.Sprintf(format, args...)}
}

// J510 returns an HTTP 510 (Not Extended) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J510(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 510, Text: string(buf), ContentType: "application/json"}
}

// E511 returns an HTTP 511 (Network Authentication Required) with the default status text.
func E511() error {
	return &Error{StatusCode: 511, Text: "Network Authentication Required"}
}

// S511 returns an HTTP 511 (Network Authentication Required) with text s.
func S511(s string) error {
	return &Error{StatusCode: 511, Text: s}
}

// F511 returns an HTTP 511 (Network Authentication Required) with Sprintf-formatted text.
func F511(format string, args ...any) error {
	return &Error{StatusCode: 511, Text: fmt.Sprintf(format, args...)}
}

// J511 returns an HTTP 511 (Network Authentication Required) accompanied by data encoded as JSON.
// If data cannot be JSON-encoded, the result will be a *JSONError, which will result in a plain text 500 to the client.
func J511(data any) error {
	buf, err := json.Marshal(data)
	if err != nil {
		return &JSONError{Data: data, Err: err}
	}
	return &Error{StatusCode: 511, Text: string(buf), ContentType: "application/json"}
}
